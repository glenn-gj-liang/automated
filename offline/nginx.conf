# ------ http 级指令（必须在所有 server 之前）------
map $http_upgrade $connection_upgrade {
    default upgrade;
    ""      close;
}

# ------ 单域名，按路径转发 ------
server {
    listen 80;
    listen 443 ssl;
    http2 on;
    server_name registry.databi.cc;

    # TLS 路径（容器内）
    ssl_certificate     /etc/nginx/tls/tls.crt;
    ssl_certificate_key /etc/nginx/tls/tls.key;
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;

    # 常用代理参数
    client_max_body_size 0;
    proxy_request_buffering off;
    proxy_http_version 1.1;
    proxy_connect_timeout 600;
    proxy_send_timeout    600;
    proxy_read_timeout    600;
    send_timeout          600;
    proxy_buffering off;
    proxy_redirect off;

    # 根路径给入口或健康检查
    location = / { return 200 "ok\n"; }            # 或：return 200 "ok\n";
    add_header Content-Type text/plain always;   # 若用 200


    # UI
    location = /ui { return 301 /ui/; }
    location ^~ /ui/ {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_pass http://registry-ui:8080/;
    }

    # docker.io
    location = /docker.io { return 301 /docker.io/; }
    location ^~ /docker.io/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://reg-docker-hub:5000/;
    }

    # ghcr.io
    location = /ghcr.io { return 301 /ghcr.io/; }
    location ^~ /ghcr.io/   { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-ghcr:5000/; }

    # gcr.io
    location = /gcr.io { return 301 /gcr.io/; }
    location ^~ /gcr.io/    { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-gcr:5000/; }

    # k8s.gcr.io
    location = /k8s.gcr.io { return 301 /k8s.gcr.io/; }
    location ^~ /k8s.gcr.io/ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-k8s-gcr:5000/; }

    # registry.k8s.io
    location = /registry.k8s.io { return 301 /registry.k8s.io/; }
    location ^~ /registry.k8s.io/ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-k8s:5000/; }

    # quay.io
    location = /quay.io { return 301 /quay.io/; }
    location ^~ /quay.io/   { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-quay:5000/; }

    # mcr.microsoft.com
    location = /mcr.microsoft.com { return 301 /mcr.microsoft.com/; }
    location ^~ /mcr.microsoft.com/ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-mcr:5000/; }

    # docker.elastic.co
    location = /docker.elastic.co { return 301 /docker.elastic.co/; }
    location ^~ /docker.elastic.co/ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-elastic:5000/; }

    # nvcr.io
    location = /nvcr.io { return 301 /nvcr.io/; }
    location ^~ /nvcr.io/   { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://reg-nvcr:5000/; }
}
